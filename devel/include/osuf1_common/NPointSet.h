// Generated by gencpp from file osuf1_common/NPointSet.msg
// DO NOT EDIT!


#ifndef OSUF1_COMMON_MESSAGE_NPOINTSET_H
#define OSUF1_COMMON_MESSAGE_NPOINTSET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <osuf1_common/NPoint.h>

namespace osuf1_common
{
template <class ContainerAllocator>
struct NPointSet_
{
  typedef NPointSet_<ContainerAllocator> Type;

  NPointSet_()
    : set()  {
    }
  NPointSet_(const ContainerAllocator& _alloc)
    : set(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::osuf1_common::NPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::osuf1_common::NPoint_<ContainerAllocator> >> _set_type;
  _set_type set;





  typedef boost::shared_ptr< ::osuf1_common::NPointSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osuf1_common::NPointSet_<ContainerAllocator> const> ConstPtr;

}; // struct NPointSet_

typedef ::osuf1_common::NPointSet_<std::allocator<void> > NPointSet;

typedef boost::shared_ptr< ::osuf1_common::NPointSet > NPointSetPtr;
typedef boost::shared_ptr< ::osuf1_common::NPointSet const> NPointSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osuf1_common::NPointSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osuf1_common::NPointSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::osuf1_common::NPointSet_<ContainerAllocator1> & lhs, const ::osuf1_common::NPointSet_<ContainerAllocator2> & rhs)
{
  return lhs.set == rhs.set;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::osuf1_common::NPointSet_<ContainerAllocator1> & lhs, const ::osuf1_common::NPointSet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace osuf1_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::osuf1_common::NPointSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osuf1_common::NPointSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osuf1_common::NPointSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osuf1_common::NPointSet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osuf1_common::NPointSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osuf1_common::NPointSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osuf1_common::NPointSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53f40bcd3e313df5264df51e6264f28c";
  }

  static const char* value(const ::osuf1_common::NPointSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53f40bcd3e313df5ULL;
  static const uint64_t static_value2 = 0x264df51e6264f28cULL;
};

template<class ContainerAllocator>
struct DataType< ::osuf1_common::NPointSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osuf1_common/NPointSet";
  }

  static const char* value(const ::osuf1_common::NPointSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osuf1_common::NPointSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NPoint[] set \n"
"================================================================================\n"
"MSG: osuf1_common/NPoint\n"
"float32[] p\n"
;
  }

  static const char* value(const ::osuf1_common::NPointSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osuf1_common::NPointSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NPointSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osuf1_common::NPointSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osuf1_common::NPointSet_<ContainerAllocator>& v)
  {
    s << indent << "set[]" << std::endl;
    for (size_t i = 0; i < v.set.size(); ++i)
    {
      s << indent << "  set[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::osuf1_common::NPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.set[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSUF1_COMMON_MESSAGE_NPOINTSET_H
