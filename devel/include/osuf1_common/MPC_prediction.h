// Generated by gencpp from file osuf1_common/MPC_prediction.msg
// DO NOT EDIT!


#ifndef OSUF1_COMMON_MESSAGE_MPC_PREDICTION_H
#define OSUF1_COMMON_MESSAGE_MPC_PREDICTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace osuf1_common
{
template <class ContainerAllocator>
struct MPC_prediction_
{
  typedef MPC_prediction_<ContainerAllocator> Type;

  MPC_prediction_()
    : state()
    , inputs()  {
    }
  MPC_prediction_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , inputs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _state_type;
  _state_type state;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _inputs_type;
  _inputs_type inputs;





  typedef boost::shared_ptr< ::osuf1_common::MPC_prediction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osuf1_common::MPC_prediction_<ContainerAllocator> const> ConstPtr;

}; // struct MPC_prediction_

typedef ::osuf1_common::MPC_prediction_<std::allocator<void> > MPC_prediction;

typedef boost::shared_ptr< ::osuf1_common::MPC_prediction > MPC_predictionPtr;
typedef boost::shared_ptr< ::osuf1_common::MPC_prediction const> MPC_predictionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osuf1_common::MPC_prediction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osuf1_common::MPC_prediction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::osuf1_common::MPC_prediction_<ContainerAllocator1> & lhs, const ::osuf1_common::MPC_prediction_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.inputs == rhs.inputs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::osuf1_common::MPC_prediction_<ContainerAllocator1> & lhs, const ::osuf1_common::MPC_prediction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace osuf1_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osuf1_common::MPC_prediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osuf1_common::MPC_prediction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osuf1_common::MPC_prediction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18f71d97ec5d2c12b5676c1814e14a05";
  }

  static const char* value(const ::osuf1_common::MPC_prediction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18f71d97ec5d2c12ULL;
  static const uint64_t static_value2 = 0xb5676c1814e14a05ULL;
};

template<class ContainerAllocator>
struct DataType< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osuf1_common/MPC_prediction";
  }

  static const char* value(const ::osuf1_common::MPC_prediction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] state\n"
"float32[] inputs\n"
;
  }

  static const char* value(const ::osuf1_common::MPC_prediction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.inputs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MPC_prediction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osuf1_common::MPC_prediction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osuf1_common::MPC_prediction_<ContainerAllocator>& v)
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "inputs[]" << std::endl;
    for (size_t i = 0; i < v.inputs.size(); ++i)
    {
      s << indent << "  inputs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.inputs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSUF1_COMMON_MESSAGE_MPC_PREDICTION_H
